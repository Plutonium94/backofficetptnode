#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('lifi:server');
var http = require('http');
var Promise = require('bluebird');
var mongoose = require('mongoose');
var mongoose = Promise.promisifyAll(mongoose);
const Utilisateur = require('../modelsMongo/Utilisateur');

try {
    mongoose.connect('mongodb://127.0.0.1:27017/projectLifi');
}catch(err) {
    mongoose.createConnection('mongodb://127.0.0.1:27017/projectLifi');
}

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '8000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
    console.log("demarrage du serveur fichier www bind " + bind);
    createdDefaultUser();
  debug('Listening on ' + bind);
}

var createdDefaultUser = function(){
    return new Promise(
        function(resolve, reject) {
            Utilisateur.find({}).then(function(utilisateurs){
               resolve(utilisateurs);
            });
            console.log("creation utilisateur par defaut first launch in www");
        }
    ).then(function(utilisateurs){
        return new Promise(
            function(resolve, reject) {
                if(utilisateurs==null || utilisateurs.length==0)
                {
                    console.log("seconde requete creation launch in www");
                    var userToInsert = {
                        firstName: "lifimbds",
                        mail:"lifimbds@mbds.fr",
                        username:"lifimbds",
                        password:"lifimbds",
                        imei:"",
                        idLamp:""
                    };
                    const util = new Utilisateur(userToInsert);
                    util.save().then(function(userReallySave){
                        if(userReallySave==null)
                        {
                            reject(userReallySave);
                        }else{
                            var userFinal = userReallySave.toObject();
                            userFinal.resultat=true;
                            resolve(userFinal);
                        }
                    });
                }
                /*else{
                    reject(utilisateurs);
                }*/
            }
        )
    }).then(function(utilisateur){
        console.log("fin utilisateur cr√©e ");
        console.log(utilisateur);
    }).catch(function(err){
        console.log('error create default user launch in www  '+ err);

    });

};
